name: Train FX CNN-LSTM Model

on:
  workflow_dispatch: {}
  schedule:
    - cron: "15 3 * * 1-5"
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  train:
    runs-on: ubuntu-latest
    env:
      GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
      TF_CPP_MIN_LOG_LEVEL: "2"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare artifacts folder
        run: |
          mkdir -p artifacts
          echo "train start $(date -u +%FT%TZ)" > artifacts/hello.txt

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff # Install the linter

      # --- NEW STEP ADDED ---
      - name: Lint with Ruff
        run: |
          # Check code for errors and style issues.
          # The '--exit-non-zero-on-fix' flag will fail the workflow if issues are found.
          ruff check . --fix --exit-non-zero-on-fix
      # ----------------------

      - name: Export FX_TICKERS (optional)
        env:
          FX_TICKERS: ${{ vars.FX_TICKERS || secrets.FX_TICKERS }}
        run: |
          echo "FX_TICKERS=${FX_TICKERS}" >> $GITHUB_ENV
          echo "Using pairs: ${FX_TICKERS}"

      - name: Smoke read from Google Sheets
        run: |
          python - << 'PY'
          import os, sys
          from src.utils import load_config
          from src.data_sheet import concat_pairs_sheet
          cfg = load_config()
          pairs = (os.getenv("FX_TICKERS") or "EURUSD=X").split(",")
          df = concat_pairs_sheet(
              pairs,
              cfg["data"]["train_start"],
              cfg["data"]["train_end"],
              cfg["data"]["timezone"],
              cfg["data"]["sheet"]["id"],
              cfg["data"]["sheet"]["worksheet"],
          )
          print("Rows from sheet:", len(df))
          if df.empty:
              sys.exit("No rows read from sheet â€” check Sheet ID/tab name, sharing, and date range.")
          PY

      - name: Train model
        run: |
          python -X faulthandler -m src.train 2>&1 | tee -a artifacts/train_log.txt

      - name: Verify outputs
        run: |
          if [ ! -f models/cnn_lstm_fx.h5 ]; then
            echo 'Model missing: models/cnn_lstm_fx.h5' | tee -a artifacts/train_log.txt
            exit 1
          fi
          ls -la models | tee -a artifacts/train_log.txt

      - name: Upload model & artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: model-and-artifacts
          path: |
            models/
            artifacts/
          if-no-files-found: warn
