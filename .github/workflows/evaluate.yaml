name: Evaluate FX CNN-LSTM

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "30 4 * * 1-5"

permissions:
  contents: read
  actions: read   # <-- needed for gh to list/download Train artifacts

jobs:
  evaluate:
    runs-on: ubuntu-latest
    env:
      GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
      TF_CPP_MIN_LOG_LEVEL: "2"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare artifacts folder
        run: |
          mkdir -p artifacts
          echo "evaluate start $(date -u +%FT%TZ)" > artifacts/hello.txt

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -V
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip freeze | sed -n '1,120p'

      - name: Export FX_TICKERS (optional)
        env:
          FX_TICKERS: ${{ vars.FX_TICKERS || secrets.FX_TICKERS }}
        run: |
          echo "FX_TICKERS=${FX_TICKERS}" >> $GITHUB_ENV
          echo "Using pairs: ${FX_TICKERS:-EURUSD=X,GBPUSD=X}"

      # --------- Download the latest successful Train artifact ----------
      - name: Download model from latest successful Train run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the latest successful run of the Train workflow
          RUN_ID=$(gh run list \
            --workflow "Train FX CNN-LSTM" \
            --branch main \
            --json databaseId,conclusion,status \
            -q '[.[] | select(.conclusion=="success" and .status=="completed")][0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "No successful Train run found. Please run Train first."
            exit 1
          fi

          echo "Downloading artifacts from Train run id: $RUN_ID"
          gh run download "$RUN_ID" --name "model-and-artifacts" --dir .

          echo "Models dir:"
          ls -la models || true
          echo "Artifacts dir:"
          ls -la artifacts || true

      # --------- Accept .keras or .h5 ----------
      - name: Verify model present
        run: |
          if [ -f models/cnn_lstm_fx.keras ]; then
            echo "Found models/cnn_lstm_fx.keras"
          elif [ -f models/cnn_lstm_fx.h5 ]; then
            echo "Found legacy models/cnn_lstm_fx.h5"
          else
            echo "ERROR: No model found after artifact download."
            exit 1
          fi

      - name: Run evaluation
        run: |
          python -X faulthandler -m src.evaluate 2>&1 | tee -a artifacts/eval_log.txt

      - name: Upload evaluation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eval-artifacts
          path: artifacts/
